Backround

Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. 
These type of devices are part of the quantified self movement – a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. 
One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. 
In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. 
They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. 
More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset). 

Data

Data 
The training data for this project are available here: 
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
The test data are available here:
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv
The data for this project come from this source: http://groupware.les.inf.puc-rio.br/har.
It is so helpful, that these data can be used for this course.

Analysis
##Step1: Download Data files from the given sources:

fileUrl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
download.file(fileUrl, destfile = "pmltraining.csv")
training<-read.csv("pmltraining.csv", header=TRUE, na.strings=c("NA",""))

fileUrl<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileUrl, destfile = "pmltesting.csv")
testing<-read.csv("pmltesting.csv", header=TRUE, na.strings=c("NA",""))

##Step 2: Install Packages and call libraries

library(ElemStatLearn)
library(caret)
library(rpart)
library(randomForest)
library(RCurl)
set.seed(2014)

##Step3: Setup Training and validation sets

inTrain<-createDataPartition(y=training$classe, p=0.5, list = FALSE)
train<-training[inTrain,]
validating<-training[-inTrain,]

##Step4: Execute certain data quality checks, e.g. Keep only rows, that are filled with more than 60%

train2 <- c((colSums(!is.na(training[,-ncol(training)])) >= 0.6*nrow(training)))
training   <-  training[,train2]
validating <- validation[,train2]

##Step4: Training and Fitting
##Setup a random forest model
modFit<-train(classe~.,data=training,method="rf")

##Step5: Evaluate the model by importance and confusion matrix
importance(model)
confusionMatrix(predict(modFit,newdata=validating[,-ncol(validating)]),validating$classe)

##Step6: Accuracy Testing
accuracy <-c(as.numeric(predict(modFit,newdata=validating[,-ncol(validating)])==validating$classe))
accuracy <-sum(accuracy)*100/nrow(validating)

## Step7: Predicting with testing dataset

predictions <- predict(modFit,newdata=testing[-1,])
print(predictions)

##  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 
##  B  A  B  A  A  E  D  B  A  A  B  C  B  A  E  E  A  B  B  B 
## Levels: A B C D E